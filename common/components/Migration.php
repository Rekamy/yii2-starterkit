<?php

namespace common\components;

use yii\db\Migration as YiiMigration;
use Yii;

class Migration extends YiiMigration
{
    //oracle primary key function
    public function primaryKey($length = null) {
        if ($this->db->driverName === 'oci') {
            return ' NUMBER(10,0) GENERATED BY DEFAULT ON NULL AS IDENTITY INCREMENT BY 1 START WITH 1 PRIMARY KEY';
        } else {
            return parent::primaryKey();
        }
    }

    // empty database function
    protected function emptyDatabase() {
        switch ($this->db->driverName) {
            case 'oci':
            $sqlObject = $this->db->createCommand("select 'truncate table \"' || table_name ||'\"' as sql FROM user_tables WHERE table_name != 'migration'")->queryAll();
            foreach ($sqlObject as $query) {
                $this->execute($query['SQL']);
            }
            break;
            case 'mysql':
            $fkCheckOff = "SET FOREIGN_KEY_CHECKS = 0";
            $sqlObject = $this->db->createCommand($fkCheckOff)->execute();
            $command = $this->db->createCommand('set sql_mode=PIPES_AS_CONCAT');
            $command->execute();
            $sqlObject = $this->db->createCommand("select 'truncate table  ".$this->getDbName($this->db).".' || table_name || ';' as 'SQL' from information_schema.tables
                WHERE table_schema = '".$this->getDbName($this->db)."' and table_name != 'migration' and table_type = 'BASE_TABLE'")->queryAll();
            foreach ($sqlObject as $query) {
                $this->execute($query);
            }
            $fkCheckOn = "SET FOREIGN_KEY_CHECKS = 1";
            $this->execute($fkCheckOn);
            break;
            default:
            echo "Schema type were undefined. Please manually empty the database!";
            break;
        }
    }


    //drop function
    public function customDrop() {
        if ($this->db->driverName === 'oci') {
            //drop for confirm
            $tables = $this->db->createCommand("select 'drop table \"' || table_name || '\" cascade constraints' as sql from user_tables where table_name != 'migration'")->queryAll();
            foreach ($tables as $table) {
                $this->execute($table['SQL']);
            }

            $views = $this->db->createCommand("select 'drop view \"' || view_name || '\" cascade constraints' as sql from user_views")->queryAll();
            foreach ($views as $view) {
                $this->execute($view['SQL']);
            }
        }
        if ($this->db->driverName === 'mysql') {
            //drop for confirm
            try {
                //set fk check off
                $fkCheckOff = "SET FOREIGN_KEY_CHECKS = 0";
                $this->execute($fkCheckOff);
                //prepare script for dropping table and view
                $script = "SELECT concat('DROP TABLE IF EXISTS ".$this->getDbName($this->db).".', table_name, ';') as 'query'
                FROM information_schema.tables
                WHERE table_schema = '".$this->getDbName($this->db)."' and table_name != 'migration'";

                $viewDropScript = "SELECT CONCAT('DROP VIEW IF EXISTS ".$this->getDbName($this->db).".', table_name, ';') AS query
                FROM information_schema.tables
                WHERE table_schema = '".$this->getDbName($this->db)."' AND TABLE_TYPE LIKE 'VIEW'";

                //dropping view
                $viewDropObject = $this->db->createCommand($viewDropScript)->queryAll();
                foreach ($viewDropObject as $viewQuery) {
                    $this->execute($viewQuery['query']);
                }

                //dropping table
                $sqlObject = $this->db->createCommand($script)->queryAll();
                foreach ($sqlObject as $query) {
                    $this->execute($query['query']);
                }

                //set fk check back on
                $fkCheckOn = "SET FOREIGN_KEY_CHECKS = 1";
                $this->execute($fkCheckOn);

            } catch (\yii\db\Exception $e) {
                echo $e->message();
                return false;
            }
        }
    }

    //drop function
    public function reset() {
        if ($this->db->driverName === 'oci') {
            //drop for confirm
            $tables = $this->db->createCommand("select 'drop table \"' || table_name || '\" cascade constraints' as sql from user_tables")->queryAll();
            foreach ($tables as $table) {
                $this->execute($table['SQL']);
            }

            $views = $this->db->createCommand("select 'drop view \"' || view_name || '\" cascade constraints' as sql from user_views")->queryAll();
            foreach ($views as $view) {
                $this->execute($view['SQL']);
            }
        }
        if ($this->db->driverName === 'mysql') {
            //drop for confirm
            try {
                //set fk check off
                $fkCheckOff = "SET FOREIGN_KEY_CHECKS = 0";
                $this->execute($fkCheckOff);
                //prepare script for dropping table and view
                $script = "SELECT concat('DROP TABLE IF EXISTS ".$this->getDbName($this->db).".', table_name, ';') as 'query'
                FROM information_schema.tables
                WHERE table_schema = '".$this->getDbName($this->db)."'";

                $viewDropScript = "SELECT CONCAT('DROP VIEW IF EXISTS ".$this->getDbName($this->db).".', table_name, ';') AS query
                FROM information_schema.tables
                WHERE table_schema = '".$this->getDbName($this->db)."' AND TABLE_TYPE LIKE 'VIEW'";

                //dropping view
                $viewDropObject = $this->db->createCommand($viewDropScript)->queryAll();
                foreach ($viewDropObject as $viewQuery) {
                    $this->execute($viewQuery['query']);
                }

                //dropping table
                $sqlObject = $this->db->createCommand($script)->queryAll();
                foreach ($sqlObject as $query) {
                    $this->execute($query['query']);
                }

                //set fk check back on
                $fkCheckOn = "SET FOREIGN_KEY_CHECKS = 1";
                $this->execute($fkCheckOn);

            } catch (\yii\db\Exception $e) {
                echo $e->message();
                return false;
            }
        }
    }

    // oracle only
    public function alterIdentitySequence()
    {
        if ($this->db->driverName === 'oci') {
            $alterIdentity = "
            select 'ALTER TABLE \"' || table_name || '\" MODIFY \"id\" GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH LIMIT VALUE)' as sql from user_tables where table_name != 'migration'
            ";
            //reinitialize identity sequence
            $alterIdentityScript = $this->db->createCommand($alterIdentity)->queryAll();
            foreach ($alterIdentityScript as $script) {
                $this->execute($script['SQL']);
            }
        }
        return true;
    }

    public static function getDbDriver()
    {
        return $this->db->driverName;
    }

    public static function getDbName($db,$name='dbname')
    {
        switch ($db->driverName) {
            case 'mysql':
            if (preg_match('/' . $name . '=([^;]*)/', $db->dsn, $match)) {
                return $match[1];
            } else {
                return null;
            }
            break;

            case 'oci':
            return $db->username;
            break;

            default:
                # code...
            return null;
            break;
        }

    }

}
